<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Verificação de Tarefas Contábeis</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .card-empresa{transition:.3s}
        .card-empresa:hover{transform:translateY(-5px);box-shadow:0 10px 20px rgba(0,0,0,.1)}
        .tarefa-concluida{text-decoration:line-through;color:#6c757d}
        .obrigacao-item{border-left:4px solid #0d6efd;padding-left:10px;margin-bottom:8px}
        .vencimento-proximo{background:#fff3cd}
        .navbar-brand{font-weight:700}
        .regime-badge{font-size:.8em}
        .tarefa-prioridade-alta{border-left:4px solid #dc3545}
        .tarefa-prioridade-media{border-left:4px solid #ffc107}
        .tarefa-prioridade-baixa{border-left:4px solid #0dcaf0}
        .cnpj-help,.cnpj-status{font-size:.85rem}
        .check-item{display:flex;align-items:center;gap:.5rem;padding:.5rem .75rem;border:1px solid #e9ecef;border-radius:.5rem;margin-bottom:.5rem}
        .check-item small{color:#6c757d}
        .sticky-controls{position:sticky;top:0;background:#fff;z-index:2;padding-top:.5rem;padding-bottom:.5rem;border-bottom:1px solid #dee2e6;margin-bottom:.75rem}
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#"><i class="fas fa-calculator me-2"></i>Controle FiscoContábil</a>
            <button id="btnNovaEmpresa" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#modalEmpresa">
                <i class="fas fa-plus me-1"></i> Nova Empresa
            </button>
        </div>
    </nav>

    <div class="container my-4">
        <!-- NAV TABS -->
        <ul class="nav nav-tabs" id="mainTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="abaEmpresas-tab" data-bs-toggle="tab" data-bs-target="#abaEmpresas" type="button" role="tab" aria-controls="abaEmpresas" aria-selected="true">
                    <i class="fa-solid fa-building me-1"></i>Empresas Cadastradas
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="abaChecklist-tab" data-bs-toggle="tab" data-bs-target="#abaChecklist" type="button" role="tab" aria-controls="abaChecklist" aria-selected="false">
                    <i class="fa-solid fa-list-check me-1"></i>Checklist Mensal
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="abaContabilidade-tab" data-bs-toggle="tab" data-bs-target="#abaContabilidade" type="button" role="tab" aria-controls="abaContabilidade" aria-selected="false">
                    <i class="fa-solid fa-book me-1"></i>Contabilidade
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="abaCertificados-tab" data-bs-toggle="tab" data-bs-target="#abaCertificados" type="button" role="tab" aria-controls="abaCertificados" aria-selected="false">
                    <i class="fa-solid fa-certificate me-1"></i>Certificados Digital
                </button>
            </li>
        </ul>

        <div class="tab-content pt-3">
            <!-- ABA EMPRESAS (original) -->
            <div class="tab-pane fade show active" id="abaEmpresas" role="tabpanel" aria-labelledby="abaEmpresas-tab">
                <div class="row mb-4">
                    <div class="col-md-6"><h2>Empresas Cadastradas</h2></div>
                    <div class="col-md-6 text-end">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Buscar empresa..." id="inputBusca">
                            <button class="btn btn-outline-secondary" type="button" id="btnBuscar"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                </div>
                <div class="row" id="listaEmpresas"></div>
            </div>

            <!-- ABA CHECKLIST MENSAL (NOVA) -->
            <div class="tab-pane fade" id="abaChecklist" role="tabpanel" aria-labelledby="abaChecklist-tab">
                <div class="sticky-controls">
                    <div class="row g-2 align-items-end">
                        <div class="col-md-4">
                            <label class="form-label" for="selEmpresaChecklist">Empresa</label>
                            <select class="form-select" id="selEmpresaChecklist"></select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label" for="selResponsavelChecklist">Responsável Contábil/Fiscal</label>
                            <select class="form-select" id="selResponsavelChecklist"></select>
                            <ul class="nav nav-pills mt-2" id="subTabsChecklist" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="subChecklist-tab" data-bs-toggle="tab" data-bs-target="#paneChecklist" type="button" role="tab" aria-controls="paneChecklist" aria-selected="true">
                                        Checklist
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="subGerar-tab" data-bs-toggle="tab" data-bs-target="#paneGerar" type="button" role="tab" aria-controls="paneGerar" aria-selected="false">
                                        Gerar
                                    </button>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label" for="competencia">Competência</label>
                            <input type="month" class="form-control" id="competencia">
                        </div>
                        <div class="col-md-3 text-md-end d-grid d-md-block">
                            <button class="btn btn-outline-success me-1" id="btnMarcarTudo"><i class="fa-solid fa-check-double me-1"></i>Marcar tudo</button>
                            <button class="btn btn-outline-secondary me-1" id="btnLimparTudo"><i class="fa-regular fa-circle me-1"></i>Limpar tudo</button>
                            <button class="btn btn-outline-primary" id="btnExportarCSV"><i class="fa-solid fa-file-csv me-1"></i>Exportar CSV</button>
                        </div>
                    </div>
                </div>

                <div class="tab-content mt-3" id="subTabsChecklistContent">
                    <div class="tab-pane fade show active" id="paneChecklist" role="tabpanel" aria-labelledby="subChecklist-tab">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="mb-1" id="ckNomeEmpresa">—</h5>
                                <p class="mb-2">
                                    <strong>CNPJ:</strong> <span id="ckCnpj">—</span> &nbsp;•&nbsp;
                                    <strong>Responsável:</strong> <span id="ckResponsavel">—</span>
                                </p>
                                <hr>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0">Tarefas do mês</h6>
                                    <div class="form-check form-switch m-0">
                                        <input class="form-check-input" type="checkbox" id="ckSelecionarTodas">
                                        <label class="form-check-label" for="ckSelecionarTodas">Selecionar todas</label>
                                    </div>
                                </div>
                                <div id="listaChecklist"></div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="paneGerar" role="tabpanel" aria-labelledby="subGerar-tab">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="mb-2">Empresas do responsável selecionado</h6>
                                <div id="listaEmpresasResponsavel" class="row"></div>
                                <hr class="my-3">
                                <div class="d-flex flex-wrap gap-2 mb-3">
                                    <button class="btn btn-primary" id="btnGerarRelatorio"><i class="fa-solid fa-file-lines me-1"></i>Gerar relatório</button>
                                    <button class="btn btn-outline-primary" id="btnExportarRelatorioCSV"><i class="fa-solid fa-file-csv me-1"></i>Exportar CSV</button>
                                    <button class="btn btn-outline-secondary" id="btnImprimirRelatorio"><i class="fa-solid fa-print me-1"></i>Imprimir</button>
                                </div>
                                <div id="relatorioResponsavel"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- ABA CONTABILIDADE -->
            <div class="tab-pane fade" id="abaContabilidade" role="tabpanel" aria-labelledby="abaContabilidade-tab">
                <div class="row">
                    <div class="col-12 mb-3">
                        <h2>Contabilidade</h2>
                    </div>
                    <div class="col-12">
                        <div class="sticky-controls">
                            <div class="row g-2 align-items-end">
                                <div class="col-md-5">
                                    <label class="form-label" for="selResponsavelContab">Responsável Contábil/Fiscal</label>
                                    <select class="form-select" id="selResponsavelContab"></select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label" for="competenciaContab">Competência</label>
                                    <input type="month" class="form-control" id="competenciaContab">
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label" for="filtroContab">Filtro</label>
                                    <select class="form-select" id="filtroContab">
                                        <option value="todos">Todos</option>
                                        <option value="com">Com Contabilidade</option>
                                        <option value="sem">Sem Contabilidade</option>
                                        <option value="nao">Não informado</option>
                                    </select>
                                </div>
                                <div class="col-md-4 text-md-end d-grid d-md-block">
                                    <button class="btn btn-primary me-1" id="btnGerarRelatorioContab"><i class="fa-solid fa-file-lines me-1"></i>Gerar relatório</button>
                                    <button class="btn btn-outline-primary me-1" id="btnExportarRelatorioContabCSV"><i class="fa-solid fa-file-csv me-1"></i>Exportar CSV</button>
                                    <button class="btn btn-outline-secondary" id="btnImprimirRelatorioContab"><i class="fa-solid fa-print me-1"></i>Imprimir</button>
                                </div>
                            </div>
                        </div>
                        <div id="relatorioContabilidade"></div>
                    </div>
                    <div id="contabilidadeConteudo" class="row g-3"></div>
                </div>
            </div>

            <!-- ABA CERTIFICADOS DIGITAL -->
            <div class="tab-pane fade" id="abaCertificados" role="tabpanel" aria-labelledby="abaCertificados-tab">
                <div class="row">
                    <div class="col-12 mb-3">
                        <h2>Certificados Digitais</h2>
                    </div>
                    <div id="certificadosConteudo"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL EMPRESA (mesmo do seu arquivo, com DFMS e EFD-Reinf já incluídos) -->
    <div class="modal fade" id="modalEmpresa" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalEmpresaTitulo">Nova Empresa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="formEmpresa">
                        <input type="hidden" id="empresaId">
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label for="nomeEmpresa" class="form-label">Nome da Empresa</label>
                                <input type="text" class="form-control" id="nomeEmpresa" required>
                            </div>
                            <div class="col-md-4">
                                <label for="cnpj" class="form-label">CNPJ</label>
                                <input type="text" class="form-control" id="cnpj" required placeholder="Somente números" inputmode="numeric" maxlength="14">
                                <div class="d-flex justify-content-between mt-1">
                                    <span class="text-muted cnpj-help">Ao sair do campo, busco dados da Receita.</span>
                                    <span id="cnpjStatus" class="cnpj-status"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="regimeTributario" class="form-label">Regime Tributário</label>
                                <select class="form-select" id="regimeTributario" required>
                                    <option value="">Selecione...</option>
                                    <option value="Simples Nacional">Simples Nacional</option>
                                    <option value="Presumido">Presumido</option>
                                    <option value="Real">Real</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="regimeCaixaCompetencia" class="form-label">Regime: Caixa/Competência</label>
                                <select class="form-select" id="regimeCaixaCompetencia" required>
                                    <option value="">Selecione...</option>
                                    <option value="Caixa">Caixa</option>
                                    <option value="Competência">Competência</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="certificadoDigital" class="form-label">Vencimento do Certificado Digital</label>
                                <input type="date" class="form-control" id="certificadoDigital">
                            </div>
                            <div class="col-md-6">
                                <label for="responsavel" class="form-label">Responsável Contábil/Fiscal</label>
                                <select class="form-select" id="responsavel">
                                    <option value="">Selecione...</option>
                                    <option value="Tyrone Rego">Tyrone Rego</option>
                                    <option value="Vitoria Nogueira">Vitoria Nogueira</option>
                                    <option value="Iva Palheta">Iva Palheta</option>
                                    <option value="Amanda Fernandes">Amanda Fernandes</option>
                                    <option value="João Rocha">João Rocha</option>
                                    <option value="Thaynara Ferreira">Thaynara Ferreira</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="tipoAtividade" class="form-label">Atividade</label>
                                <select class="form-select" id="tipoAtividade" required>
                                    <option value="">Selecione...</option>
                                    <option value="Comércio">Comércio</option>
                                    <option value="Serviço">Serviço</option>
                                    <option value="Ambas">Ambas</option>
                                </select>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">Obrigações Mensais</div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="card h-100">
                                            <div class="card-header">Municipais</div>
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="ISSQN" id="obrigIssqn">
                                                    <label class="form-check-label" for="obrigIssqn">ISSQN</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="NFS-e" id="obrigNfse">
                                                    <label class="form-check-label" for="obrigNfse">NFS-e (Tomadas e Prestadas)</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="DFMS" id="obrigDfms">
                                                    <label class="form-check-label" for="obrigDfms">DFMS</label>
                                                </div>
                                                <div id="municipaisObrigacoesContainer" class="mt-2"></div>
                                                <div class="input-group input-group-sm mt-2">
                                                    <input type="text" class="form-control" id="inputObrigacaoMunicipal" placeholder="Adicionar obrigação municipal">
                                                    <button class="btn btn-outline-primary" type="button" id="btnAddObrigacaoMunicipal"><i class="fas fa-plus"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="card h-100">
                                            <div class="card-header">Estaduais</div>
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="SPED Fiscal" id="obrigSpedFed">
                                                    <label class="form-check-label" for="obrigSpedFed">SPED Fiscal</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="GIA/EFD-ICMS/IPI" id="obrigGiaEst">
                                                    <label class="form-check-label" for="obrigGiaEst">GIA/EFD-ICMS/IPI</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="IRPJ/CSLL" id="obrigIrpjCsllEst">
                                                    <label class="form-check-label" for="obrigIrpjCsllEst">NF-e (Entradas e Saídas)</label>
                                                </div>
                                                <div id="estaduaisObrigacoesContainer" class="mt-2"></div>
                                                <div class="input-group input-group-sm mt-2">
                                                    <input type="text" class="form-control" id="inputObrigacaoEstadual" placeholder="Adicionar obrigação estadual">
                                                    <button class="btn btn-outline-primary" type="button" id="btnAddObrigacaoEstadual"><i class="fas fa-plus"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="card h-100">
                                            <div class="card-header">Federais</div>
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="IRPJ/CSLL" id="obrigIrpjCsllFed">
                                                    <label class="form-check-label" for="obrigIrpjCsllFed">IRPJ/CSLL</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="PIS/COFINS" id="obrigPisCofinsFed">
                                                    <label class="form-check-label" for="obrigPisCofinsFed">PIS/COFINS</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="DCTF" id="obrigDctfFed">
                                                    <label class="form-check-label" for="obrigDctfFed">DCTF</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="EFD-Contribuições" id="obrigEfdContribFed">
                                                    <label class="form-check-label" for="obrigEfdContribFed">EFD-Contribuições</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="PGDAS-D" id="obrigPgdasFed">
                                                    <label class="form-check-label" for="obrigPgdasFed">PGDAS-D</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="EFD-Reinf" id="obrigReinfFed">
                                                    <label class="form-check-label" for="obrigReinfFed">EFD-Reinf</label>
                                                </div>
                                                <div id="federaisObrigacoesContainer" class="mt-2"></div>
                                                <div class="input-group input-group-sm mt-2">
                                                    <input type="text" class="form-control" id="inputObrigacaoFederal" placeholder="Adicionar obrigação federal">
                                                    <button class="btn btn-outline-primary" type="button" id="btnAddObrigacaoFederal"><i class="fas fa-plus"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="card h-100">
                                            <div class="card-header">Outras obrigações</div>
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="Com Contabilidade" id="obrigComContabilidadeOut">
                                                    <label class="form-check-label" for="obrigComContabilidadeOut">Com Contabilidade</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="Sem Contabilidade" id="obrigSemContabilidadeOut">
                                                    <label class="form-check-label" for="obrigSemContabilidadeOut">Sem Contabilidade</label>
                                                </div>
                                                <div id="outrasObrigacoesContainer" class="mt-2"></div>
                                                <div class="input-group input-group-sm mt-2">
                                                    <input type="text" class="form-control" id="inputOutraObrigacao" placeholder="Adicionar outra obrigação">
                                                    <button class="btn btn-outline-primary" type="button" id="btnAddOutraObrigacao"><i class="fas fa-plus"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">Declarações Anuais</div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-check">
                                            <input class="form-check-input declaração-anual" type="checkbox" value="DEFIS" id="defis">
                                            <label class="form-check-label" for="defis">DEFIS (Simples Nacional)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-check">
                                            <input class="form-check-input declaração-anual" type="checkbox" value="ECF" id="ecf">
                                            <label class="form-check-label" for="ecf">ECF (Presumido/Real)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-check">
                                            <input class="form-check-input declaração-anual" type="checkbox" value="ECD" id="ecd">
                                            <label class="form-check-label" for="ecd">ECD (Presumido/Real)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-check">
                                            <input class="form-check-input declaração-anual" type="checkbox" value="DIMED" id="dimed">
                                            <label class="form-check-label" for="dimed">DIMED (Todos os regimes)</label>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-check">
                                            <input class="form-check-input declaração-anual" type="checkbox" value="DMOB" id="dmob">
                                            <label class="form-check-label" for="dmob">DMOB (Todos os regimes)</label>
                                        </div>
                                    </div>
                                </div>
                                <div id="declaracoesAnuaisContainer" class="mt-2"></div>
                                <div class="input-group input-group-sm mt-2">
                                    <input type="text" class="form-control" id="inputDeclaracaoAnual" placeholder="Adicionar declaração anual">
                                    <button class="btn btn-outline-primary" type="button" id="btnAddDeclaracaoAnual"><i class="fas fa-plus"></i></button>
                                </div>
                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="btnSalvarEmpresa">Salvar Empresa</button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL VISUALIZAR (sem alterações de layout relevantes) -->
    <div class="modal fade" id="modalVisualizarEmpresa" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalVisualizarTitulo">Detalhes da Empresa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h4 id="detalheNomeEmpresa"></h4>
                            <p><strong>CNPJ:</strong> <span id="detalheCnpj"></span></p>
                            <p><strong>Regime Tributário:</strong> <span id="detalheRegimeTributario" class="badge bg-primary regime-badge"></span></p>
                            <p><strong>Regime:</strong> <span id="detalheRegimeCaixaCompetencia"></span></p>
                            <p><strong>Certificado Digital:</strong> <span id="detalheCertificadoDigital"></span></p>
                            <p><strong>Responsável:</strong> <span id="detalheResponsavel"></span></p>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>Tarefas</h5>
                                <button class="btn btn-sm btn-outline-primary" id="btnNovaTarefa"><i class="fas fa-plus"></i> Nova Tarefa</button>
                            </div>
                            <div id="listaTarefas"></div>
                        </div>
                    </div>
                    <hr>
                    <p><strong>Atividade:</strong> <span id="detalheTipoAtividade"></span></p>
                    <hr>
                    <h5>Obrigações Mensais</h5>
                    <div class="row">
                        <div class="col-md-3"><h6>Municipais</h6><div id="detalheObrigacoesMunicipais"></div></div>
                        <div class="col-md-3"><h6>Estaduais</h6><div id="detalheObrigacoesEstaduais"></div></div>
                        <div class="col-md-3"><h6>Federais</h6><div id="detalheObrigacoesFederais"></div></div>
                        <div class="col-md-3"><h6>Outras obrigações</h6><div id="detalheObrigacoesOutras"></div></div>
                    </div>
                    <hr>
                    <h5>Declarações Anuais</h5>
                    <div id="detalheDeclaracoesAnuais"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" id="btnEditarEmpresa">Editar Empresa</button>
                </div>
            </div>
        </div>
    </div>

    <!-- MODAL TAREFA (igual ao seu) -->
    <div class="modal fade" id="modalTarefa" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTarefaTitulo">Nova Tarefa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="formTarefa">
                        <input type="hidden" id="tarefaId">
                        <input type="hidden" id="tarefaEmpresaId">
                        <div class="mb-3">
                            <label for="tituloTarefa" class="form-label">Título</label>
                            <input type="text" class="form-control" id="tituloTarefa" required>
                        </div>
                        <div class="mb-3">
                            <label for="descricaoTarefa" class="form-label">Descrição</label>
                            <textarea class="form-control" id="descricaoTarefa" rows="3"></textarea>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="dataVencimentoTarefa" class="form-label">Data de Vencimento</label>
                                <input type="date" class="form-control" id="dataVencimentoTarefa">
                            </div>
                            <div class="col-md-6">
                                <label for="prioridadeTarefa" class="form-label">Prioridade</label>
                                <select class="form-select" id="prioridadeTarefa">
                                    <option value="baixa">Baixa</option>
                                    <option value="media">Média</option>
                                    <option value="alta">Alta</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="btnSalvarTarefa">Salvar Tarefa</button>
                </div>
            </div>
        </div>
    </div>

    <!-- SCRIPTS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ======= Estado global
        let empresas = JSON.parse(localStorage.getItem('empresas')) || [];
        let empresaEditando = null;
        let tarefaEditando = null;

        // ======= Helpers
        const byId = (id)=>document.getElementById(id);
        function setCNPJStatus(texto,tipo='muted'){
            const el = byId('cnpjStatus'); el.className='cnpj-status';
            if(!texto){el.textContent='';return}
            el.classList.add(tipo==='ok'?'text-success':(tipo==='erro'?'text-danger':'text-muted'));
            el.textContent = texto;
        }
        function gerarId(){ return Date.now().toString(36)+Math.random().toString(36).substr(2) }
        function formatarData(s){ if(!s) return 'Não informado'; const d=new Date(s); return isNaN(d)?'Não informado':d.toLocaleDateString('pt-BR') }
        function normalizarTexto(s){
            return (s||'')
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g,'')
                .toLowerCase()
                .trim()
                .replace(/\s+/g,' ');
        }

        // Criação dinâmica de checkboxes em "Outras obrigações"
        function addOutraObrigacaoCheckbox(nome, marcar=true){
            const cont = byId('outrasObrigacoesContainer'); if(!cont) return;
            const jaExiste = Array.from(document.querySelectorAll('[id^="obrig"][id$="Out"]')).some(i=>i.value.toLowerCase()===nome.toLowerCase());
            if(jaExiste) return;
            const id = `obrig${gerarId()}Out`;
            const wrap = document.createElement('div'); wrap.className='form-check';
            const input = document.createElement('input'); input.className='form-check-input'; input.type='checkbox'; input.value=nome; input.id=id; input.checked=!!marcar;
            const label = document.createElement('label'); label.className='form-check-label'; label.setAttribute('for', id); label.textContent = nome;
            wrap.appendChild(input); wrap.appendChild(label); cont.appendChild(wrap);
        }
        // Criação dinâmica de checkboxes para Municipais/Estaduais/Federais
        function addObrigacaoDinamica(tipo, nome, marcar=true){
            let containerId='', sufix='';
            if(tipo==='mun'){ containerId='municipaisObrigacoesContainer'; sufix=''; }
            if(tipo==='est'){ containerId='estaduaisObrigacoesContainer'; sufix='Est'; }
            if(tipo==='fed'){ containerId='federaisObrigacoesContainer'; sufix='Fed'; }
            const cont = byId(containerId); if(!cont) return;
            const seletorSufix = sufix ? `[id$="${sufix}"]` : `:not([id$="Est"]):not([id$="Fed"]):not([id$="Out"])`;
            const jaExiste = Array.from(document.querySelectorAll(`[id^="obrig"]${seletorSufix}`)).some(i=>i.value.toLowerCase()===nome.toLowerCase());
            if(jaExiste) return;
            const id = `obrig${gerarId()}${sufix}`;
            const wrap = document.createElement('div'); wrap.className='form-check';
            const input = document.createElement('input'); input.className='form-check-input'; input.type='checkbox'; input.value=nome; input.id=id; input.checked=!!marcar;
            const label = document.createElement('label'); label.className='form-check-label'; label.setAttribute('for', id); label.textContent = nome;
            wrap.appendChild(input); wrap.appendChild(label); cont.appendChild(wrap);
        }
        function renderOutrasObrigacoesFromEmpresa(emp){
            const cont = byId('outrasObrigacoesContainer'); if(!cont) return;
            cont.innerHTML='';
            const lista = emp?.obrigacoesMensais?.outras||[];
            // evita duplicar itens já existentes como estáticos (ex.: Contabilidade)
            const existentes = new Set(Array.from(document.querySelectorAll('[id^="obrig"][id$="Out"]')).map(i=>i.value));
            lista.forEach(nome=>{ if(!existentes.has(nome)) addOutraObrigacaoCheckbox(nome, false) });
        }
        function renderObrigacoesDinamicasFromEmpresa(emp){
            const map = [
                {tipo:'mun', container:'municipaisObrigacoesContainer', lista: emp?.obrigacoesMensais?.municipais||[], sufix:''},
                {tipo:'est', container:'estaduaisObrigacoesContainer', lista: emp?.obrigacoesMensais?.estaduais||[], sufix:'Est'},
                {tipo:'fed', container:'federaisObrigacoesContainer', lista: emp?.obrigacoesMensais?.federais||[], sufix:'Fed'},
            ];
            map.forEach(({tipo, container, lista, sufix})=>{
                const cont = byId(container); if(!cont) return; cont.innerHTML='';
                const existentes = sufix
                    ? new Set(Array.from(document.querySelectorAll(`[id^="obrig"][id$="${sufix}"]`)).map(i=>i.value))
                    : new Set(Array.from(document.querySelectorAll('[id^="obrig"]:not([id$="Est"]):not([id$="Fed"]):not([id$="Out"])')).map(i=>i.value));
                lista.forEach(nome=>{ if(!existentes.has(nome)) addObrigacaoDinamica(tipo, nome, false); });
            });
        }
        // Dinâmicas para Declarações Anuais
        function addDeclaracaoAnualDinamica(nome, marcar=true){
            const cont = byId('declaracoesAnuaisContainer'); if(!cont) return;
            const jaExiste = Array.from(document.querySelectorAll('.declaração-anual')).some(i=>i.value.toLowerCase()===nome.toLowerCase());
            if(jaExiste) return;
            const id = `dec${gerarId()}`;
            const wrap = document.createElement('div'); wrap.className='form-check';
            const input = document.createElement('input'); input.className='form-check-input declaração-anual'; input.type='checkbox'; input.value=nome; input.id=id; input.checked=!!marcar;
            const label = document.createElement('label'); label.className='form-check-label'; label.setAttribute('for', id); label.textContent = nome;
            wrap.appendChild(input); wrap.appendChild(label); cont.appendChild(wrap);
        }
        function renderDeclaracoesAnuaisFromEmpresa(emp){
            const cont = byId('declaracoesAnuaisContainer'); if(!cont) return; cont.innerHTML='';
            const lista = emp?.declaracoesAnuais||[];
            const existentes = new Set(Array.from(document.querySelectorAll('.declaração-anual')).map(i=>i.value));
            lista.forEach(nome=>{ if(!existentes.has(nome)) addDeclaracaoAnualDinamica(nome, false); });
        }

        // ======= CNPJ (BrasilAPI + fallback)
        async function tryFetchCNPJ(){
            const v=(byId('cnpj').value||'').replace(/\D/g,''); if(v.length!==14){setCNPJStatus('CNPJ inválido','erro');return}
            setCNPJStatus('Consultando...');
            try{
                const r = await fetch(`https://brasilapi.com.br/api/cnpj/v1/${v}`,{cache:'no-store'});
                if(r.ok){ const data=await r.json(); const nome=byId('nomeEmpresa');
                    if(!nome.value && data?.razao_social) nome.value=data.razao_social;
                    setCNPJStatus('Dados obtidos da Receita (BrasilAPI).','ok'); return;
                }
            }catch{}
            try{
                const r2=await fetch(`https://receitaws.com.br/v1/cnpj/${v}`,{cache:'no-store'});
                if(r2.ok){ const d2=await r2.json(); if(d2 && d2.status!=='ERROR'){
                    const nome=byId('nomeEmpresa'); if(!nome.value && d2?.nome) nome.value=d2.nome;
                    setCNPJStatus('Dados obtidos (Receitaws).','ok'); return;
                }}
                setCNPJStatus('Não foi possível obter dados do CNPJ.','erro');
            }catch{ setCNPJStatus('Não foi possível obter dados do CNPJ (CORS).','erro') }
        }

        // ======= Inicialização
        document.addEventListener('DOMContentLoaded', ()=>{
            migrarRemoverDctfEstaduais();
            migrarContabilidadeParaOutras();
            carregarEmpresas();
            // Preenche responsáveis da aba Contabilidade
            preencherSelectResponsavelContab();
            // Empresa modal events
            byId('btnSalvarEmpresa').addEventListener('click', salvarEmpresa);
            byId('btnBuscar').addEventListener('click', buscarEmpresas);
            byId('inputBusca').addEventListener('keyup', buscarEmpresas);
            byId('btnEditarEmpresa').addEventListener('click', prepararEdicaoEmpresa);
            byId('btnNovaEmpresa').addEventListener('click', ()=>{
                empresaEditando = null;
                byId('formEmpresa').reset();
                byId('empresaId').value='';
                byId('modalEmpresaTitulo').textContent='Nova Empresa';
                document.querySelectorAll('.declaração-anual').forEach(cb=>cb.checked=false);
                setCNPJStatus('');
                const cont = byId('outrasObrigacoesContainer'); if(cont) cont.innerHTML='';
                const inp = byId('inputOutraObrigacao'); if(inp) inp.value='';
                const cMun = byId('municipaisObrigacoesContainer'); if(cMun) cMun.innerHTML=''; const iMun = byId('inputObrigacaoMunicipal'); if(iMun) iMun.value='';
                const cEst = byId('estaduaisObrigacoesContainer'); if(cEst) cEst.innerHTML=''; const iEst = byId('inputObrigacaoEstadual'); if(iEst) iEst.value='';
                const cFed = byId('federaisObrigacoesContainer'); if(cFed) cFed.innerHTML=''; const iFed = byId('inputObrigacaoFederal'); if(iFed) iFed.value='';
                const cDec = byId('declaracoesAnuaisContainer'); if(cDec) cDec.innerHTML=''; const iDec = byId('inputDeclaracaoAnual'); if(iDec) iDec.value='';
            });
            byId('btnNovaTarefa').addEventListener('click', novaTarefa);
            byId('btnSalvarTarefa').addEventListener('click', salvarTarefa);
            const cnpjInput = byId('cnpj');
            cnpjInput.addEventListener('blur', tryFetchCNPJ);
            cnpjInput.addEventListener('input', ()=>{
                const digits = (cnpjInput.value||'').replace(/\D/g,'').slice(0,14);
                if (cnpjInput.value !== digits) cnpjInput.value = digits;
                if (digits.length===14) tryFetchCNPJ();
            });
            byId('modalEmpresa').addEventListener('hidden.bs.modal', ()=>{ byId('formEmpresa').reset(); byId('empresaId').value=''; setCNPJStatus(''); const cont = byId('outrasObrigacoesContainer'); if(cont) cont.innerHTML=''; const inp = byId('inputOutraObrigacao'); if(inp) inp.value=''; const cMun = byId('municipaisObrigacoesContainer'); if(cMun) cMun.innerHTML=''; const iMun = byId('inputObrigacaoMunicipal'); if(iMun) iMun.value=''; const cEst = byId('estaduaisObrigacoesContainer'); if(cEst) cEst.innerHTML=''; const iEst = byId('inputObrigacaoEstadual'); if(iEst) iEst.value=''; const cFed = byId('federaisObrigacoesContainer'); if(cFed) cFed.innerHTML=''; const iFed = byId('inputObrigacaoFederal'); if(iFed) iFed.value=''; const cDec = byId('declaracoesAnuaisContainer'); if(cDec) cDec.innerHTML=''; const iDec = byId('inputDeclaracaoAnual'); if(iDec) iDec.value=''; });
            // Outras obrigações: adicionar item
            const btnAddOut = byId('btnAddOutraObrigacao');
            const inputOut = byId('inputOutraObrigacao');
            if(btnAddOut && inputOut){
                const handlerAddOutra = ()=>{
                    const v = (inputOut.value||'').trim(); if(!v) return;
                    addOutraObrigacaoCheckbox(v, true);
                    inputOut.value=''; inputOut.focus();
                };
                btnAddOut.addEventListener('click', handlerAddOutra);
                inputOut.addEventListener('keydown', (e)=>{ if(e.key==='Enter'){ e.preventDefault(); handlerAddOutra(); } });
            }
            byId('modalTarefa').addEventListener('hidden.bs.modal', ()=>{ byId('formTarefa').reset(); byId('tarefaId').value=''; byId('tarefaEmpresaId').value=''; tarefaEditando=null });

            // Checklist events
            byId('selEmpresaChecklist').addEventListener('change', refreshChecklist);
            const selResp = byId('selResponsavelChecklist'); if(selResp){ selResp.addEventListener('change', preencherSelectChecklist); }
            byId('competencia').addEventListener('change', refreshChecklist);
            byId('btnMarcarTudo').addEventListener('click', ()=>toggleAllChecklist(true));
            byId('btnLimparTudo').addEventListener('click', ()=>toggleAllChecklist(false));
            const ckSelTodas = byId('ckSelecionarTodas');
            if(ckSelTodas){
                ckSelTodas.addEventListener('change', ()=>{
                    const flag = ckSelTodas.checked;
                    toggleAllChecklist(flag);
                    // após aplicar, garantir que estado visual permaneça consistente (sem indeterminate)
                    ckSelTodas.indeterminate = false;
                });
            }
            byId('btnExportarCSV').addEventListener('click', exportarChecklistCSV);
            const btnRel = byId('btnGerarRelatorio'); if(btnRel){ btnRel.addEventListener('click', gerarRelatorioResponsavel); }
            const btnRelCsv = byId('btnExportarRelatorioCSV'); if(btnRelCsv){ btnRelCsv.addEventListener('click', exportarRelatorioCSVResponsavel); }
            const btnRelPrint = byId('btnImprimirRelatorio'); if(btnRelPrint){ btnRelPrint.addEventListener('click', imprimirRelatorioResponsavel); }

            // Contabilidade: eventos dos botões de relatório
            const btnRelCont = byId('btnGerarRelatorioContab'); if(btnRelCont){ btnRelCont.addEventListener('click', gerarRelatorioContab); }
            const btnRelContCsv = byId('btnExportarRelatorioContabCSV'); if(btnRelContCsv){ btnRelContCsv.addEventListener('click', exportarRelatorioContabCSV); }
            const btnRelContPrint = byId('btnImprimirRelatorioContab'); if(btnRelContPrint){ btnRelContPrint.addEventListener('click', imprimirRelatorioContab); }
            const selFiltroContab = byId('filtroContab'); if(selFiltroContab){ selFiltroContab.addEventListener('change', renderAbaContabilidade); }
            const inpCompContab = byId('competenciaContab'); if(inpCompContab){ inpCompContab.addEventListener('change', renderAbaContabilidade); }

            // Dinâmicos: Municipais
            const btnAddMun = byId('btnAddObrigacaoMunicipal'); const inputMun = byId('inputObrigacaoMunicipal');
            if(btnAddMun && inputMun){
                const h=()=>{ const v=(inputMun.value||'').trim(); if(!v) return; addObrigacaoDinamica('mun', v, true); inputMun.value=''; inputMun.focus(); };
                btnAddMun.addEventListener('click', h);
                inputMun.addEventListener('keydown', e=>{ if(e.key==='Enter'){ e.preventDefault(); h(); } });
            }
            // Dinâmicos: Estaduais
            const btnAddEst = byId('btnAddObrigacaoEstadual'); const inputEst = byId('inputObrigacaoEstadual');
            if(btnAddEst && inputEst){
                const h=()=>{ const v=(inputEst.value||'').trim(); if(!v) return; addObrigacaoDinamica('est', v, true); inputEst.value=''; inputEst.focus(); };
                btnAddEst.addEventListener('click', h);
                inputEst.addEventListener('keydown', e=>{ if(e.key==='Enter'){ e.preventDefault(); h(); } });
            }
            // Dinâmicos: Federais
            const btnAddFed = byId('btnAddObrigacaoFederal'); const inputFed = byId('inputObrigacaoFederal');
            if(btnAddFed && inputFed){
                const h=()=>{ const v=(inputFed.value||'').trim(); if(!v) return; addObrigacaoDinamica('fed', v, true); inputFed.value=''; inputFed.focus(); };
                btnAddFed.addEventListener('click', h);
                inputFed.addEventListener('keydown', e=>{ if(e.key==='Enter'){ e.preventDefault(); h(); } });
            }
            // Dinâmicos: Declarações Anuais
            const btnAddDec = byId('btnAddDeclaracaoAnual'); const inputDec = byId('inputDeclaracaoAnual');
            if(btnAddDec && inputDec){
                const h=()=>{ const v=(inputDec.value||'').trim(); if(!v) return; addDeclaracaoAnualDinamica(v, true); inputDec.value=''; inputDec.focus(); };
                btnAddDec.addEventListener('click', h);
                inputDec.addEventListener('keydown', e=>{ if(e.key==='Enter'){ e.preventDefault(); h(); } });
            }

            // Competência padrão = mês atual
            const now = new Date();
            byId('competencia').value = `${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,'0')}`;
            const compContabEl = byId('competenciaContab');
            if(compContabEl){ compContabEl.value = `${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,'0')}`; }

            // Preenche selecionadores da aba Checklist
            preencherSelectChecklist();
        });

        // ======= Empresas (listagem/CRUD) – igual ao seu, mantendo DFMS/EFD-Reinf
        function carregarEmpresas(){
            const wrap = byId('listaEmpresas'); wrap.innerHTML='';
            if(empresas.length===0){
                wrap.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-building fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">Nenhuma empresa cadastrada</h4>
                        <p>Clique no botão "Nova Empresa" para começar</p>
                    </div>`;
                preencherSelectChecklist();
                preencherSelectResponsavelContab();
                renderAbaContabilidade();
                renderAbaCertificados();
                return;
            }
            empresas.forEach(empresa=>{
                const v = empresa.certificadoDigital ? new Date(empresa.certificadoDigital) : null;
                const diff = v ? Math.ceil((v - new Date())/(1000*60*60*24)) : Infinity;
                const cardClass = v && diff<=30 ? 'vencimento-proximo':'';
                wrap.innerHTML += `
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card card-empresa ${cardClass}">
                            <div class="card-body">
                                <h5 class="card-title">${empresa.nome}</h5>
                                <h6 class="card-subtitle mb-2 text-muted">${empresa.cnpj}</h6>
                                <p class="card-text">
                                    <span class="badge bg-primary regime-badge">${empresa.regimeTributario}</span>
                                    <span class="badge bg-secondary regime-badge">${empresa.regimeCaixaCompetencia}</span>
                                </p>
                                <p class="card-text">
                                    <small class="text-muted"><i class="fas fa-certificate me-1"></i> Certi. Digital Vencimento: ${formatarData(empresa.certificadoDigital)}
                                    ${v && diff<=30 ? `<span class="badge bg-warning">Vence em ${diff} dias</span>`:''}</small>
                                </p>
                                <p class="card-text"><small class="text-muted"><i class="fas fa-user me-1"></i> Responsável: ${empresa.responsavel||'Não informado'}</small></p>
                                <button class="btn btn-sm btn-outline-primary me-1" onclick="visualizarEmpresa('${empresa.id}')"><i class="fas fa-eye me-1"></i> Ver detalhes</button>
                                <button class="btn btn-sm btn-outline-danger" onclick="excluirEmpresa('${empresa.id}')"><i class="fas fa-trash me-1"></i> Excluir</button>
                            </div>
                        </div>
                    </div>`;
            });
            preencherSelectChecklist();
            preencherSelectResponsavelContab();
            renderAbaContabilidade();
            renderAbaCertificados();
        }

        // ======= Abas novas: Contabilidade e Certificados
        function renderAbaContabilidade(){
            const cont = byId('contabilidadeConteudo'); if(!cont) return;
            const lista = empresas||[];
            if(!lista.length){ cont.innerHTML = '<div class="col-12"><p class="text-muted">Nenhuma empresa cadastrada.</p></div>'; return; }

            const hasFlag = (emp, flag)=> (emp?.obrigacoesMensais?.outras||[]).includes(flag);
            const filtroSel = (byId('filtroContab')?.value||'todos');
            const listaFiltrada = lista.filter(emp=>{
                if(filtroSel==='com'){ return hasFlag(emp,'Com Contabilidade'); }
                if(filtroSel==='sem'){ return hasFlag(emp,'Sem Contabilidade'); }
                if(filtroSel==='nao'){ return !hasFlag(emp,'Com Contabilidade') && !hasFlag(emp,'Sem Contabilidade'); }
                return true;
            });
            if(!listaFiltrada.length){ cont.innerHTML='<div class="alert alert-info">Nenhuma empresa correspondente ao filtro.</div>'; return; }
            const filtroSel = (byId('filtroContab')?.value||'todos');
            const listaFiltrada = lista.filter(emp=>{
                if(filtroSel==='com'){ return hasFlag(emp,'Com Contabilidade'); }
                if(filtroSel==='sem'){ return hasFlag(emp,'Sem Contabilidade'); }
                if(filtroSel==='nao'){ return !hasFlag(emp,'Com Contabilidade') && !hasFlag(emp,'Sem Contabilidade'); }
                return true;
            });
            if(!listaFiltrada.length){ cont.innerHTML='<div class="alert alert-info">Nenhuma empresa correspondente ao filtro.</div>'; return; }
            const com = lista.filter(e=> hasFlag(e,'Com Contabilidade'));
            const sem = lista.filter(e=> hasFlag(e,'Sem Contabilidade'));
            const nao = lista.filter(e=> !hasFlag(e,'Com Contabilidade') && !hasFlag(e,'Sem Contabilidade'));
            const compSel = byId('competenciaContab')?.value||'';

            const makeCard = (titulo, itens)=>{
                return `
                    <div class="col-md-6 col-lg-4">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <span>${titulo}</span>
                                <span class="badge bg-primary">${itens.length}</span>
                            </div>
                            <div class="card-body p-0">
                                ${itens.length ? `<div class="list-group list-group-flush">
                                    ${itens.map(emp=>{
                                        let statusHtml = '';
                                        if(titulo==='Com Contabilidade' && compSel){
                                            const keyCom = 'Outras obrigações|Com Contabilidade';
                                            const estado = carregarEstadoChecklist(emp.id, compSel);
                                            const statusCom = estado[`status|${keyCom}`] || 'Pendente';
                                            const cls = statusCom==='Escriturado' ? 'bg-success' : (statusCom==='Pendente' ? 'bg-warning text-dark' : 'bg-info');
                                            statusHtml = `<span class="badge ${cls}">${statusCom}</span>`;
                                        }
                                        return `
                                            <div class="list-group-item">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>${emp.nome}</strong>
                                                        <div class="small text-muted">CNPJ: ${emp.cnpj||''}</div>
                                                    </div>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <span class="badge bg-secondary">${emp.responsavel||'—'}</span>
                                                        ${statusHtml}
                                                    </div>
                                                </div>
                                            </div>`;
                                    }).join('')}
                                </div>` : '<div class="p-3 text-muted">Nenhuma empresa</div>'}
                            </div>
                        </div>
                    </div>`;
            };

            const filtro = (byId('filtroContab')?.value||'todos');
            const filtroSel = (byId('filtroContab')?.value||'todos');
            const listaFiltrada = lista.filter(emp=>{
                if(filtroSel==='com'){ return hasFlag(emp,'Com Contabilidade'); }
                if(filtroSel==='sem'){ return hasFlag(emp,'Sem Contabilidade'); }
                if(filtroSel==='nao'){ return !hasFlag(emp,'Com Contabilidade') && !hasFlag(emp,'Sem Contabilidade'); }
                return true;
            });

            let html = '';
            if(filtro==='todos'){
                html = `${makeCard('Com Contabilidade', com)}${makeCard('Sem Contabilidade', sem)}${nao.length ? makeCard('Não informado', nao) : ''}`;
            }else if(filtro==='com'){
                html = makeCard('Com Contabilidade', com);
            }else if(filtro==='sem'){
                html = makeCard('Sem Contabilidade', sem);
            }else if(filtro==='nao'){
                html = nao.length ? makeCard('Não informado', nao) : '';
            }
            cont.innerHTML = html || '<div class="col-12"><p class="text-muted">Nenhuma empresa correspondente ao filtro.</p></div>';
        }

        function renderAbaCertificados(){
            const cont = byId('certificadosConteudo'); if(!cont) return;
            const lista = empresas||[];
            if(!lista.length){ cont.innerHTML = '<p class="text-muted">Nenhuma empresa cadastrada.</p>'; return; }

            const itens = lista.map(emp=>{
                const v = emp.certificadoDigital ? new Date(emp.certificadoDigital) : null;
                const dias = v ? Math.ceil((v - new Date())/(1000*60*60*24)) : null;
                let rowClass = '', badgeClass='bg-secondary', status='Não informado';
                if(v){
                    if(dias < 0){ rowClass='table-danger'; badgeClass='bg-danger'; status='Vencido'; }
                    else if(dias <= 30){ rowClass='table-warning'; badgeClass='bg-warning text-dark'; status=`Vence em ${dias} dia(s)`; }
                    else { rowClass='table-success'; badgeClass='bg-success'; status='OK'; }
                }
                return {emp, dias, rowClass, badgeClass, status};
            }).sort((a,b)=>{
                const ai = a.dias===null ? Number.POSITIVE_INFINITY : a.dias;
                const bi = b.dias===null ? Number.POSITIVE_INFINITY : b.dias;
                return ai - bi;
            });

            const rows = itens.map(it=>`
                <tr class="${it.rowClass}">
                    <td>${it.emp.nome}</td>
                    <td>${it.emp.cnpj||''}</td>
                    <td>${formatarData(it.emp.certificadoDigital)}</td>
                    <td>${it.dias===null ? '—' : it.dias}</td>
                    <td><span class="badge ${it.badgeClass}">${it.status}</span></td>
                </tr>
            `).join('');

            cont.innerHTML = `
                <div class="table-responsive">
                    <table class="table table-sm align-middle">
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>CNPJ</th>
                                <th>Vencimento</th>
                                <th>Dias</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${rows}
                        </tbody>
                    </table>
                </div>
            `;
        }

        function salvarEmpresa(){
            const id = byId('empresaId').value || gerarId();
            const empresa = {
                id,
                nome: byId('nomeEmpresa').value.trim(),
                cnpj: (byId('cnpj').value||'').replace(/\D/g,''),
                regimeTributario: byId('regimeTributario').value,
                regimeCaixaCompetencia: byId('regimeCaixaCompetencia').value,
                certificadoDigital: byId('certificadoDigital').value,
                responsavel: byId('responsavel').value,
                tipoAtividade: byId('tipoAtividade').value,
                obrigacoesMensais: {
                    municipais: coletarObrigacoesSelecionadas('mun'),
                    estaduais: coletarObrigacoesSelecionadas('est'),
                    federais: coletarObrigacoesSelecionadas('fed'),
                    outras: coletarObrigacoesSelecionadas('out')
                },
                declaracoesAnuais: Array.from(document.querySelectorAll('.declaração-anual:checked')).map(cb=>cb.value),
                tarefas: empresaEditando ? (empresaEditando.tarefas||[]) : []
            };
            if(empresaEditando){
                const i = empresas.findIndex(e=>e.id===empresaEditando.id);
                if(i!==-1) empresas[i]=empresa;
            } else {
                empresas.push(empresa);
            }
            localStorage.setItem('empresas', JSON.stringify(empresas));
            carregarEmpresas();
            bootstrap.Modal.getInstance(byId('modalEmpresa')).hide();
            empresaEditando = null;
        }

        function coletarObrigacoesSelecionadas(tipo){
            const prefix='obrig';
            const sufix = tipo==='mun' ? '' : (tipo==='est' ? 'Est' : (tipo==='fed' ? 'Fed' : (tipo==='out' ? 'Out' : '')));
            const arr=[];
            document.querySelectorAll(`[id^="${prefix}"]`).forEach(input=>{
                if(input.checked){
                    if(sufix==='' && !/(Est|Fed|Out)$/.test(input.id)) arr.push(input.value);
                    if(sufix && input.id.endsWith(sufix)) arr.push(input.value);
                }
            });
            return arr;
        }

        function visualizarEmpresa(id){
            empresaEditando = empresas.find(e=>e.id===id); if(!empresaEditando) return;
            byId('detalheNomeEmpresa').textContent = empresaEditando.nome;
            byId('detalheCnpj').textContent = empresaEditando.cnpj;
            byId('detalheRegimeTributario').textContent = empresaEditando.regimeTributario;
            byId('detalheRegimeCaixaCompetencia').textContent = empresaEditando.regimeCaixaCompetencia;
            byId('detalheCertificadoDigital').textContent = formatarData(empresaEditando.certificadoDigital);
            byId('detalheResponsavel').textContent = empresaEditando.responsavel||'Não informado';
            const detAtv = byId('detalheTipoAtividade'); if(detAtv) detAtv.textContent = empresaEditando.tipoAtividade||'Não informado';
            preencherObrigacoes('detalheObrigacoesMunicipais', empresaEditando.obrigacoesMensais.municipais);
            preencherObrigacoes('detalheObrigacoesEstaduais', empresaEditando.obrigacoesMensais.estaduais);
            preencherObrigacoes('detalheObrigacoesFederais', empresaEditando.obrigacoesMensais.federais);
            preencherObrigacoes('detalheObrigacoesOutras', empresaEditando.obrigacoesMensais.outras);
            const cont = byId('detalheDeclaracoesAnuais'); cont.innerHTML='';
            if(empresaEditando.declaracoesAnuais?.length){
                empresaEditando.declaracoesAnuais.forEach(d=>{
                    const span=document.createElement('span'); span.className='badge bg-info me-2'; span.textContent=d; cont.appendChild(span);
                });
            }else cont.innerHTML='<p class="text-muted">Nenhuma declaração anual configurada</p>';
            carregarTarefas();
            new bootstrap.Modal(byId('modalVisualizarEmpresa')).show();
        }

        function preencherObrigacoes(elId, lista){
            const el=byId(elId); el.innerHTML='';
            if(lista?.length){ lista.forEach(o=>{ const div=document.createElement('div'); div.className='obrigacao-item'; div.textContent=o; el.appendChild(div); })}
            else el.innerHTML='<p class="text-muted">Nenhuma obrigação</p>';
        }

        // Migração: renomear 'Contabilidade' para 'Com Contabilidade', mover de Federal para Outras obrigações e atualizar checklist
        function migrarContabilidadeParaOutras(){
            let alterou=false;
            empresas = (empresas||[]).map(emp=>{
                const federais = emp?.obrigacoesMensais?.federais||[];
                const outras = emp?.obrigacoesMensais?.outras||[];

                const tinhaContabilidadeFederal = federais.includes('Contabilidade');
                const tinhaContabilidadeOutras = outras.includes('Contabilidade');

                let novasFederais = federais.filter(x=>x!=='Contabilidade');
                let novasOutras = outras.filter(x=>x!=='Contabilidade');

                if(tinhaContabilidadeFederal || tinhaContabilidadeOutras){
                    if(!novasOutras.includes('Com Contabilidade')){
                        novasOutras = [...novasOutras, 'Com Contabilidade'];
                    }
                    alterou = true;
                }

                if(alterou){
                    emp = {
                        ...emp,
                        obrigacoesMensais: {
                            municipais: emp?.obrigacoesMensais?.municipais||[],
                            estaduais: emp?.obrigacoesMensais?.estaduais||[],
                            federais: novasFederais,
                            outras: Array.from(new Set(novasOutras))
                        }
                    };
                }
                return emp;
            });
            if(alterou){
                // Atualiza estados do checklist existentes nas chaves do localStorage
                try{
                    const keys = Object.keys(localStorage);
                    keys.forEach(k=>{
                        if(k.startsWith('checklist_')){
                            try{
                                const obj = JSON.parse(localStorage.getItem(k)||'{}');
                                // Mapeia possíveis variantes antigas para a nova chave
                                const antigos = [
                                    'Federal|Contabilidade',
                                    'Outras|Contabilidade',
                                    'Outras obrigações|Contabilidade',
                                    'Outras|Com Contabilidade'
                                ];
                                const novaChave = 'Outras obrigações|Com Contabilidade';
                                let mudou = false;
                                antigos.forEach(oldKey=>{
                                    if(Object.prototype.hasOwnProperty.call(obj, oldKey)){
                                        obj[novaChave] = obj[oldKey];
                                        delete obj[oldKey];
                                        mudou = true;
                                    }
                                });
                                if(mudou){ localStorage.setItem(k, JSON.stringify(obj)); }
                            }catch{}
                        }
                    });
                }catch{}
                localStorage.setItem('empresas', JSON.stringify(empresas));
            }
        }

        // Migração: remover 'DCTF' das obrigações Estaduais e limpar estados do checklist
        function migrarRemoverDctfEstaduais(){
            let alterou=false;
            empresas = (empresas||[]).map(emp=>{
                const estaduais = emp?.obrigacoesMensais?.estaduais||[];
                if(estaduais.includes('DCTF')){
                    const novasEstaduais = estaduais.filter(x=>x!=='DCTF');
                    emp = {
                        ...emp,
                        obrigacoesMensais: {
                            municipais: emp?.obrigacoesMensais?.municipais||[],
                            estaduais: novasEstaduais,
                            federais: emp?.obrigacoesMensais?.federais||[],
                            outras: emp?.obrigacoesMensais?.outras||[]
                        }
                    };
                    alterou=true;
                }
                return emp;
            });
            if(alterou){
                // Remover possíveis chaves salvas no checklist para 'Estadual|DCTF'
                try{
                    const keys = Object.keys(localStorage);
                    keys.forEach(k=>{
                        if(k.startsWith('checklist_')){
                            try{
                                const obj = JSON.parse(localStorage.getItem(k)||'{}');
                                if(Object.prototype.hasOwnProperty.call(obj, 'Estadual|DCTF')){
                                    delete obj['Estadual|DCTF'];
                                    localStorage.setItem(k, JSON.stringify(obj));
                                }
                            }catch{}
                        }
                    });
                }catch{}
                localStorage.setItem('empresas', JSON.stringify(empresas));
            }
        }

        function prepararEdicaoEmpresa(){
            if(!empresaEditando) return;
            byId('empresaId').value = empresaEditando.id;
            byId('nomeEmpresa').value = empresaEditando.nome;
            byId('cnpj').value = empresaEditando.cnpj;
            byId('regimeTributario').value = empresaEditando.regimeTributario;
            byId('regimeCaixaCompetencia').value = empresaEditando.regimeCaixaCompetencia;
            byId('certificadoDigital').value = empresaEditando.certificadoDigital||'';
            byId('responsavel').value = empresaEditando.responsavel||'';
            byId('tipoAtividade').value = empresaEditando.tipoAtividade||'';
            // Renderiza primeiro os itens dinâmicos de Outras para permitir marcação
            renderOutrasObrigacoesFromEmpresa(empresaEditando);
            renderObrigacoesDinamicasFromEmpresa(empresaEditando);
            marcarObrigacoes(empresaEditando.obrigacoesMensais.municipais,'mun');
            marcarObrigacoes(empresaEditando.obrigacoesMensais.estaduais,'est');
            marcarObrigacoes(empresaEditando.obrigacoesMensais.federais,'fed');
            marcarObrigacoes(empresaEditando.obrigacoesMensais.outras,'out');
            renderDeclaracoesAnuaisFromEmpresa(empresaEditando);
            document.querySelectorAll('.declaração-anual').forEach(i=>{ i.checked=(empresaEditando.declaracoesAnuais||[]).includes(i.value) });
            byId('modalEmpresaTitulo').textContent='Editar Empresa';
            bootstrap.Modal.getInstance(byId('modalVisualizarEmpresa')).hide();
            new bootstrap.Modal(byId('modalEmpresa')).show();
        }

        function marcarObrigacoes(obrigacoes,tipo){
            const prefix='obrig'; const sufix = tipo==='mun'?'':(tipo==='est'?'Est':(tipo==='fed'?'Fed':(tipo==='out'?'Out':'')));
            document.querySelectorAll(`[id^="${prefix}"]`).forEach(input=>{
                if(sufix===''){ if(!/(Est|Fed|Out)$/.test(input.id)) input.checked = obrigacoes.includes(input.value) }
                else { if(input.id.endsWith(sufix)) input.checked = obrigacoes.includes(input.value) }
            });
        }

        function excluirEmpresa(id){
            if(!confirm('Tem certeza que deseja excluir esta empresa?')) return;
            empresas = empresas.filter(e=>e.id!==id);
            localStorage.setItem('empresas', JSON.stringify(empresas));
            carregarEmpresas();
        }

        function buscarEmpresas(){
            const termo = normalizarTexto(byId('inputBusca').value);
            if(!termo){ carregarEmpresas(); return; }
            const filtradas = empresas.filter(e=>
                normalizarTexto(e.nome||'').includes(termo) ||
                (e.cnpj||'').includes(termo) ||
                normalizarTexto(e.regimeTributario||'').includes(termo) ||
                normalizarTexto(e.responsavel||'').includes(termo)
            );
            const wrap = byId('listaEmpresas'); wrap.innerHTML='';
            if(!filtradas.length){
                wrap.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">Nenhuma empresa encontrada</h4>
                        <p>Tente alterar os termos da busca</p>
                    </div>`;
                return;
            }
            filtradas.forEach(empresa=>{
                const v = empresa.certificadoDigital ? new Date(empresa.certificadoDigital) : null;
                const diff = v ? Math.ceil((v - new Date())/(1000*60*60*24)) : Infinity;
                const cardClass = v && diff<=30 ? 'vencimento-proximo':'';
                wrap.innerHTML += `
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card card-empresa ${cardClass}">
                            <div class="card-body">
                                <h5 class="card-title">${empresa.nome}</h5>
                                <h6 class="card-subtitle mb-2 text-muted">${empresa.cnpj}</h6>
                                <p class="card-text">
                                    <span class="badge bg-primary regime-badge">${empresa.regimeTributario}</span>
                                    <span class="badge bg-secondary regime-badge">${empresa.regimeCaixaCompetencia}</span>
                                </p>
                                <p class="card-text">
                                    <small class="text-muted"><i class="fas fa-certificate me-1"></i> Certi. Digital Vencimento: ${formatarData(empresa.certificadoDigital)}
                                    ${v && diff<=30 ? `<span class="badge bg-warning">Vence em ${diff} dias</span>`:''}</small>
                                </p>
                                <p class="card-text"><small class="text-muted"><i class="fas fa-user me-1"></i> Responsável: ${empresa.responsavel||'Não informado'}</small></p>
                                <button class="btn btn-sm btn-outline-primary me-1" onclick="visualizarEmpresa('${empresa.id}')"><i class="fas fa-eye me-1"></i> Ver detalhes</button>
                                <button class="btn btn-sm btn-outline-danger" onclick="excluirEmpresa('${empresa.id}')"><i class="fas fa-trash me-1"></i> Excluir</button>
                            </div>
                        </div>
                    </div>`;
            });
        }

        // ======= Tarefas (modal) – inalterado
        function novaTarefa(){ byId('modalTarefaTitulo').textContent='Nova Tarefa'; byId('tarefaEmpresaId').value=empresaEditando.id; new bootstrap.Modal(byId('modalTarefa')).show() }
        function editarTarefa(id){
            tarefaEditando = empresaEditando.tarefas.find(t=>t.id===id); if(!tarefaEditando) return;
            byId('modalTarefaTitulo').textContent='Editar Tarefa';
            byId('tarefaId').value=tarefaEditando.id; byId('tarefaEmpresaId').value=empresaEditando.id;
            byId('tituloTarefa').value=tarefaEditando.titulo; byId('descricaoTarefa').value=tarefaEditando.descricao||'';
            byId('dataVencimentoTarefa').value=tarefaEditando.dataVencimento||''; byId('prioridadeTarefa').value=tarefaEditando.prioridade||'baixa';
            new bootstrap.Modal(byId('modalTarefa')).show();
        }
        function salvarTarefa(){
            const id = byId('tarefaId').value || gerarId();
            const empresaId = byId('tarefaEmpresaId').value;
            const tarefa = {
                id,
                titulo: byId('tituloTarefa').value.trim(),
                descricao: byId('descricaoTarefa').value,
                dataVencimento: byId('dataVencimentoTarefa').value,
                prioridade: byId('prioridadeTarefa').value,
                concluida: tarefaEditando ? !!tarefaEditando.concluida : false
            };
            const i = empresas.findIndex(e=>e.id===empresaId); if(i===-1) return;
            if(tarefaEditando){ const ti=empresas[i].tarefas.findIndex(t=>t.id===id); if(ti!==-1) empresas[i].tarefas[ti]=tarefa }
            else { if(!empresas[i].tarefas) empresas[i].tarefas=[]; empresas[i].tarefas.push(tarefa) }
            localStorage.setItem('empresas', JSON.stringify(empresas));
            if(empresaEditando && empresaEditando.id===empresaId){ empresaEditando=empresas[i]; carregarTarefas() }
            bootstrap.Modal.getInstance(byId('modalTarefa')).hide();
        }
        function carregarTarefas(){
            const cont=byId('listaTarefas'); cont.innerHTML='';
            if(!empresaEditando?.tarefas?.length){ cont.innerHTML='<p class="text-muted">Nenhuma tarefa cadastrada</p>'; return; }
            empresaEditando.tarefas.forEach(t=>{
                const prClass=`tarefa-prioridade-${t.prioridade||'baixa'}`; const okClass=t.concluida?'tarefa-concluida':'';
                cont.innerHTML+=`
                    <div class="card mb-2 ${prClass}">
                        <div class="card-body py-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="card-title mb-0 ${okClass}">${t.titulo}</h6>
                                    <small class="text-muted">Vencimento: ${formatarData(t.dataVencimento)}</small>
                                </div>
                                <div>
                                    <button class="btn btn-sm ${t.concluida?'btn-success':'btn-outline-success'}" onclick="marcarTarefa('${t.id}', ${!t.concluida})"><i class="fas ${t.concluida?'fa-check-circle':'fa-circle'}"></i></button>
                                    <button class="btn btn-sm btn-outline-primary" onclick="editarTarefa('${t.id}')"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="excluirTarefa('${t.id}')"><i class="fas fa-trash"></i></button>
                                </div>
                            </div>
                        </div>
                    </div>`;
            });
        }
        function marcarTarefa(id,concluida){
            if(!empresaEditando) return;
            const ti = empresaEditando.tarefas.findIndex(t=>t.id===id); if(ti===-1) return;
            empresaEditando.tarefas[ti].concluida = concluida;
            const ei = empresas.findIndex(e=>e.id===empresaEditando.id);
            if(ei!==-1){ empresas[ei]=empresaEditando; localStorage.setItem('empresas', JSON.stringify(empresas)); carregarTarefas() }
        }
        function excluirTarefa(id){
            if(!confirm('Tem certeza que deseja excluir esta tarefa?')) return;
            if(!empresaEditando) return;
            empresaEditando.tarefas = empresaEditando.tarefas.filter(t=>t.id!==id);
            const ei = empresas.findIndex(e=>e.id===empresaEditando.id);
            if(ei!==-1){ empresas[ei]=empresaEditando; localStorage.setItem('empresas', JSON.stringify(empresas)); carregarTarefas() }
        }

        // ======= CHECKLIST MENSAL (NOVA LÓGICA)
        function preencherSelectChecklist(){
            preencherSelectResponsavelChecklist();
            const selResp = byId('selResponsavelChecklist');
            const filtroResp = selResp ? selResp.value : '';
            const sel = byId('selEmpresaChecklist'); const cur = sel.value;
            sel.innerHTML = '<option value="">Selecione uma empresa...</option>';
            const filtroNorm = normalizarTexto(filtroResp);
            const lista = filtroNorm
                ? empresas.filter(e=> normalizarTexto(e.responsavel||'')===filtroNorm)
                : empresas;
            lista.forEach(e=>{ const opt=document.createElement('option'); opt.value=e.id; opt.textContent=e.nome; sel.appendChild(opt) });
            // mantém seleção anterior se existir e ainda compatível com o filtro
            if(lista.find(e=>e.id===cur)) sel.value=cur; else sel.value='';
            refreshChecklist();
            renderListaEmpresasResponsavel();
        }

        function preencherSelectResponsavelChecklist(){
            const sel = byId('selResponsavelChecklist'); if(!sel) return;
            const cur = sel.value;
            // Deduplica por forma normalizada, preservando o primeiro casing cadastrado
            const mapa = new Map();
            (empresas||[]).forEach(e=>{
                const raw = (e.responsavel||'').trim(); if(!raw) return;
                const key = normalizarTexto(raw); if(!key) return;
                if(!mapa.has(key)) mapa.set(key, raw);
            });
            const responsaveis = Array.from(mapa.values()).sort((a,b)=>a.localeCompare(b));
            sel.innerHTML = '<option value="">Todos os responsáveis...</option>';
            responsaveis.forEach(r=>{ const opt=document.createElement('option'); opt.value=r; opt.textContent=r; sel.appendChild(opt) });
            if(cur && responsaveis.includes(cur)) sel.value=cur;
            renderListaEmpresasResponsavel();
        }

        function renderListaEmpresasResponsavel(){
            const cont = byId('listaEmpresasResponsavel'); if(!cont) return;
            const filtro = (byId('selResponsavelChecklist')?.value||'').trim();
            const filtroNorm = normalizarTexto(filtro);
            const lista = filtroNorm ? empresas.filter(e=> normalizarTexto(e.responsavel||'')===filtroNorm) : (empresas||[]);
            cont.innerHTML = '';
            if(!lista.length){
                cont.innerHTML = '<div class="col-12"><p class="text-muted">Nenhuma empresa cadastrada.</p></div>';
                return;
            }
            lista.forEach(emp=>{
                cont.innerHTML += `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <h6 class="card-title mb-1">${emp.nome}</h6>
                                <small class="text-muted d-block">CNPJ: ${emp.cnpj||''}</small>
                                <div class="mt-2 d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" data-action="abrir-checklist" data-emp-id="${emp.id}"><i class="fa-solid fa-list-check me-1"></i>Abrir checklist</button>
                                    <button class="btn btn-sm btn-outline-secondary" data-action="selecionar-empresa" data-emp-id="${emp.id}"><i class="fa-solid fa-hand-pointer me-1"></i>Selecionar</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
            });
            // Delegação de eventos para botões
            cont.querySelectorAll('button[data-action]')?.forEach(btn=>{
                btn.addEventListener('click', ()=>{
                    const empId = btn.getAttribute('data-emp-id');
                    const action = btn.getAttribute('data-action');
                    if(!empId) return;
                    const sel = byId('selEmpresaChecklist');
                    sel.value = empId;
                    if(action==='abrir-checklist'){
                        const tabTrigger = document.querySelector('#subChecklist-tab');
                        if(tabTrigger){ new bootstrap.Tab(tabTrigger).show(); }
                    }
                    refreshChecklist();
                });
            });
        }

        function getEmpresaSelecionada(){
            const id = byId('selEmpresaChecklist').value;
            return empresas.find(e=>e.id===id)||null;
        }

        function refreshChecklist(){
            const emp = getEmpresaSelecionada();
            const comp = byId('competencia').value; // YYYY-MM
            const nome = emp?.nome || '—', cnpj = emp?.cnpj || '—', resp = emp?.responsavel || '—';
            byId('ckNomeEmpresa').textContent = nome;
            byId('ckCnpj').textContent = cnpj;
            byId('ckResponsavel').textContent = resp;

            const cont = byId('listaChecklist');
            cont.innerHTML='';
            const ckSelTodas = byId('ckSelecionarTodas');
            if(ckSelTodas){ ckSelTodas.checked=false; ckSelTodas.indeterminate=false; ckSelTodas.disabled = !emp || !comp; }
            if(!emp){ cont.innerHTML='<p class="text-muted">Selecione uma empresa para ver o checklist.</p>'; return; }
            if(!comp){ cont.innerHTML='<p class="text-muted">Selecione a competência (mês/ano) para ver o checklist.</p>'; return; }

            // Junta obrigações municipais/estaduais/federais/outras
            const itens = [
                ...(emp.obrigacoesMensais?.municipais||[]).map(x=>({area:'Municipal', nome:x})),
                ...(emp.obrigacoesMensais?.estaduais||[]).map(x=>({area:'Estadual', nome:x})),
                ...(emp.obrigacoesMensais?.federais||[]).map(x=>({area:'Federal', nome:x})),
                ...(emp.obrigacoesMensais?.outras||[]).map(x=>({area:'Outras obrigações', nome:x})),
            ];

            if(!itens.length){ cont.innerHTML='<p class="text-muted">A empresa não possui obrigações mensais cadastradas.</p>'; return; }

            const estado = carregarEstadoChecklist(emp.id, comp); // { "<area>|<nome>": true/false }
            itens.forEach((it, idx)=>{
                const key = `${it.area}|${it.nome}`;
                const checked = !!estado[key];
                const id = `ck_${idx}`;
                const status = estado[`status|${key}`] || 'Pendente';
                cont.innerHTML += `
                    <label class="check-item" for="${id}">
                        <input class="form-check-input me-1" type="checkbox" id="${id}" ${checked?'checked':''} data-key="${key}">
                        <div>
                            <div><strong>${it.nome}</strong> <small>(${it.area})</small></div>
                            ${(it.area==='Outras obrigações' && it.nome==='Com Contabilidade') ? `<div class="mt-1">
                                <select class="form-select form-select-sm" data-key-status="${key}">
                                    <option value="Escriturado" ${status==='Escriturado'?'selected':''}>Escriturado</option>
                                    <option value="Pendente" ${status==='Pendente'?'selected':''}>Pendente</option>
                                </select>
                            </div>` : ''}
                        </div>
                    </label>`;
            });

            // Listener dos checkboxes
            const allChks = Array.from(cont.querySelectorAll('input[type="checkbox"]'));
            allChks.forEach(chk=>{
                chk.addEventListener('change', ()=>{
                    const k = chk.dataset.key;
                    const cur = carregarEstadoChecklist(emp.id, comp);
                    cur[k] = chk.checked;
                    salvarEstadoChecklist(emp.id, comp, cur);
                    syncSelecionarTodasToggle(allChks);
                });
            });
            // Listener dos selects de status (apenas para 'Com Contabilidade')
            cont.querySelectorAll('select[data-key-status]')?.forEach(sel=>{
                sel.addEventListener('change', ()=>{
                    const k = `status|${sel.getAttribute('data-key-status')}`;
                    const cur = carregarEstadoChecklist(emp.id, comp);
                    cur[k] = sel.value;
                    salvarEstadoChecklist(emp.id, comp, cur);
                });
            });

            // Ajusta o estado do "Selecionar todas" conforme itens atuais
            syncSelecionarTodasToggle(allChks);
        }

        function storageKeyChecklist(empId, competencia){ return `checklist_${empId}_${competencia}` }
        function carregarEstadoChecklist(empId, competencia){
            try{ return JSON.parse(localStorage.getItem(storageKeyChecklist(empId, competencia))) || {} }catch{ return {} }
        }
        function salvarEstadoChecklist(empId, competencia, obj){
            localStorage.setItem(storageKeyChecklist(empId, competencia), JSON.stringify(obj));
        }
        function toggleAllChecklist(flag){
            const emp = getEmpresaSelecionada(); const comp = byId('competencia').value; if(!emp||!comp) return;
            const cur = carregarEstadoChecklist(emp.id, comp);
            const allChks = document.querySelectorAll('#listaChecklist input[type="checkbox"]');
            allChks.forEach(chk=>{ chk.checked=flag; cur[chk.dataset.key]=flag });
            salvarEstadoChecklist(emp.id, comp, cur);
            const ckSelTodas = byId('ckSelecionarTodas');
            if(ckSelTodas){ ckSelTodas.checked = !!flag; ckSelTodas.indeterminate = false; }
        }

        function syncSelecionarTodasToggle(chks){
            const ckSelTodas = byId('ckSelecionarTodas'); if(!ckSelTodas) return;
            const total = chks.length;
            const marcadas = chks.filter(c=>c.checked).length;
            ckSelTodas.checked = total>0 && marcadas===total;
            ckSelTodas.indeterminate = marcadas>0 && marcadas<total;
        }
        function exportarChecklistCSV(){
            const emp = getEmpresaSelecionada(); const comp = byId('competencia').value; if(!emp||!comp) return;
            const estado = carregarEstadoChecklist(emp.id, comp);
            const rows = [['Empresa','CNPJ','Responsável','Competência','Área','Tarefa','Concluída']];
            Object.keys(estado).forEach(k=>{
                if(k.startsWith('status|')) return;
                const [area, nome] = k.split('|');
                rows.push([emp.nome, emp.cnpj, emp.responsavel||'', comp, area, nome, estado[k]?'Sim':'Não']);
            });
            // inclui as não-marcadas também, caso não existam no estado
            const todas = [
                ...(emp.obrigacoesMensais?.municipais||[]).map(x=>['Municipal',x]),
                ...(emp.obrigacoesMensais?.estaduais||[]).map(x=>['Estadual',x]),
                ...(emp.obrigacoesMensais?.federais||[]).map(x=>['Federal',x]),
                ...(emp.obrigacoesMensais?.outras||[]).map(x=>['Outras obrigações',x]),
            ];
            todas.forEach(([area,nome])=>{
                const key=`${area}|${nome}`; if(!(key in estado)){
                    rows.push([emp.nome, emp.cnpj, emp.responsavel||'', comp, area, nome, 'Não']);
                }
            });
            const csv = rows.map(r=>r.map(v=>`"${(v??'').toString().replace(/"/g,'""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a'); a.href=url; a.download=`checklist_${emp.nome}_${comp}.csv`; a.click();
            URL.revokeObjectURL(url);
        }

        // ======= Relatório (Gerar) por Responsável
        function coletarItensObrigacoesFromEmpresa(emp){
            return [
                ...(emp.obrigacoesMensais?.municipais||[]).map(x=>({area:'Municipal', nome:x})),
                ...(emp.obrigacoesMensais?.estaduais||[]).map(x=>({area:'Estadual', nome:x})),
                ...(emp.obrigacoesMensais?.federais||[]).map(x=>({area:'Federal', nome:x})),
                ...(emp.obrigacoesMensais?.outras||[]).map(x=>({area:'Outras obrigações', nome:x}))
            ];
        }

        function gerarRelatorioResponsavel(){
            const cont = byId('relatorioResponsavel'); if(!cont) return;
            cont.innerHTML = '';
            const resp = (byId('selResponsavelChecklist')?.value||'').trim();
            const comp = byId('competencia')?.value||'';
            if(!comp){ cont.innerHTML = '<div class="alert alert-warning">Selecione a competência (mês/ano) para gerar o relatório.</div>'; return; }
            const filtroNorm = normalizarTexto(resp);
            const lista = (empresas||[]).filter(e=> !filtroNorm || normalizarTexto(e.responsavel||'')===filtroNorm);
            if(!lista.length){ cont.innerHTML = '<div class="alert alert-info">Nenhuma empresa encontrada.</div>'; return; }

            let html = '';
            html += `<div class=\"mb-3\"><h6 class=\"mb-1\">Relatório do checklist</h6><small class=\"text-muted\">Responsável: ${resp||'Todos os responsáveis'} • Competência: ${comp} • Concluída: Sim/Não conforme marcado</small></div>`;

            lista.forEach(emp=>{
                const itens = coletarItensObrigacoesFromEmpresa(emp);
                if(!itens.length) return;
                const estado = carregarEstadoChecklist(emp.id, comp);
                const linhas = itens.map(it=>({ area: it.area, nome: it.nome, concluida: !!estado[`${it.area}|${it.nome}`] }));
                const total = linhas.length;
                const feitas = linhas.filter(l=>l.concluida).length;
                html += `
                    <div class=\"card mb-3\">
                        <div class=\"card-body\">
                            <div class=\"d-flex justify-content-between align-items-center mb-2\">
                                <div><strong>${emp.nome}</strong> <small class=\"text-muted\">CNPJ: ${emp.cnpj||''}</small></div>
                                <span class=\"badge bg-success\">${feitas}/${total} concluída(s)</span>
                            </div>
                            <div class=\"table-responsive\">
                                <table class=\"table table-sm mb-0\">
                                    <thead>
                                        <tr><th style=\"width: 160px;\">Área</th><th>Tarefa</th><th style=\"width: 120px;\">Concluída</th></tr>
                                    </thead>
                                    <tbody>
                                        ${linhas.map(l=>`<tr><td>${l.area}</td><td>${l.nome}</td><td>${(l.area==='Outras obrigações' && l.nome==='Com Contabilidade') ? (estado['status|Outras obrigações|Com Contabilidade']||'Pendente') : (l.concluida?'Sim':'Não')}</td></tr>`).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>`;
            });

            if(!html){ cont.innerHTML = '<div class=\"alert alert-info\">Nenhuma obrigação cadastrada para as empresas selecionadas.</div>'; return; }
            cont.innerHTML = html;
        }

        function exportarRelatorioCSVResponsavel(){
            const resp = (byId('selResponsavelChecklist')?.value||'').trim();
            const comp = byId('competencia')?.value||'';
            if(!comp) return;
            const filtroNorm = normalizarTexto(resp);
            const lista = (empresas||[]).filter(e=> !filtroNorm || normalizarTexto(e.responsavel||'')===filtroNorm);
            const rows = [['Empresa','CNPJ','Responsável','Competência','Área','Tarefa','Concluída']];
            let temDados = false;
            lista.forEach(emp=>{
                const itens = coletarItensObrigacoesFromEmpresa(emp);
                if(!itens.length) return;
                const estado = carregarEstadoChecklist(emp.id, comp);
                itens.forEach(it=>{
                    const key = `${it.area}|${it.nome}`;
                    const concluida = !!estado[key];
                    const val = (it.area==='Outras obrigações' && it.nome==='Com Contabilidade') ? (estado[`status|${key}`] || 'Pendente') : (concluida ? 'Sim' : 'Não');
                    rows.push([emp.nome, emp.cnpj||'', emp.responsavel||'', comp, it.area, it.nome, val]);
                    temDados = true;
                });
            });
            if(!temDados){ return; }
            const csv = rows.map(r=>r.map(v=>`"${(v??'').toString().replace(/"/g,'""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
            const url = URL.createObjectURL(blob);
            const nomeResp = resp ? resp.replace(/\s+/g,'_') : 'todos_responsaveis';
            const nomeArq = `relatorio_checklist_${nomeResp}_${comp}.csv`;
            const a = document.createElement('a'); a.href=url; a.download=nomeArq; a.click();
            URL.revokeObjectURL(url);
        }

        function imprimirRelatorioResponsavel(){
            const cont = byId('relatorioResponsavel'); if(!cont) return;
            if(!cont.innerHTML.trim()){ gerarRelatorioResponsavel(); }
            if(!cont.innerHTML.trim()) return;
            const w = window.open('', 'relatorio', 'width=1024,height=768');
            if(!w) return;
            w.document.write(`<!DOCTYPE html><html lang="pt-BR"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Relatório</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"></head><body class="p-3">${cont.outerHTML}</body></html>`);
            w.document.close();
            w.focus();
            w.print();
        }

        // ======= Contabilidade: Responsáveis select
        function preencherSelectResponsavelContab(){
            const sel = byId('selResponsavelContab'); if(!sel) return;
            const cur = sel.value;
            const mapa = new Map();
            (empresas||[]).forEach(e=>{ const raw=(e.responsavel||'').trim(); if(!raw) return; const key=normalizarTexto(raw); if(!key) return; if(!mapa.has(key)) mapa.set(key, raw); });
            const responsaveis = Array.from(mapa.values()).sort((a,b)=>a.localeCompare(b));
            sel.innerHTML = '<option value="">Todos os responsáveis...</option>';
            responsaveis.forEach(r=>{ const opt=document.createElement('option'); opt.value=r; opt.textContent=r; sel.appendChild(opt); });
            if(cur && responsaveis.includes(cur)) sel.value=cur;
        }

        // ======= Contabilidade: Relatórios
        function gerarRelatorioContab(){
            const cont = byId('relatorioContabilidade'); if(!cont) return;
            cont.innerHTML='';
            const resp = (byId('selResponsavelContab')?.value||'').trim();
            const comp = byId('competenciaContab')?.value||'';
            if(!comp){ cont.innerHTML='<div class="alert alert-warning">Selecione a competência (mês/ano) para gerar o relatório.</div>'; return; }
            const filtroNorm = normalizarTexto(resp);
            const lista = (empresas||[]).filter(e=> !filtroNorm || normalizarTexto(e.responsavel||'')===filtroNorm);
            if(!lista.length){ cont.innerHTML='<div class="alert alert-info">Nenhuma empresa encontrada.</div>'; return; }

            const hasFlag = (emp, flag)=> (emp?.obrigacoesMensais?.outras||[]).includes(flag);

            let html = '';
            html += `<div class=\"mb-3\"><h6 class=\"mb-1\">Relatório de Contabilidade</h6><small class=\"text-muted\">Responsável: ${resp||'Todos os responsáveis'} • Competência: ${comp}</small></div>`;

            listaFiltrada.forEach(emp=>{
                const estado = carregarEstadoChecklist(emp.id, comp);
                const flagCom = hasFlag(emp, 'Com Contabilidade');
                const flagSem = hasFlag(emp, 'Sem Contabilidade');
                const keyCom = 'Outras obrigações|Com Contabilidade';
                const statusCom = estado[`status|${keyCom}`] || (estado[keyCom] ? 'Sim' : 'Pendente');
                const classificacao = flagCom ? 'Com Contabilidade' : (flagSem ? 'Sem Contabilidade' : 'Não informado');
                const conclusao = flagCom ? statusCom : (flagSem ? '—' : '—');
                html += `
                    <div class=\"card mb-2\">
                        <div class=\"card-body d-flex justify-content-between align-items-center\">
                            <div>
                                <strong>${emp.nome}</strong> <small class=\"text-muted\">CNPJ: ${emp.cnpj||''}</small>
                                <div class=\"small text-muted\">Responsável: ${emp.responsavel||'—'}</div>
                            </div>
                            <div class=\"d-flex align-items-center gap-2\">\n                                <span class=\"badge ${flagCom?'bg-primary':(flagSem?'bg-secondary':'bg-warning text-dark')}\">${classificacao}</span>\n                                <span class=\"badge ${classificacao==='Com Contabilidade' ? (conclusao==='Escriturado'?'bg-success':(conclusao==='Pendente'?'bg-warning text-dark':'bg-info')) : 'bg-light text-dark'}\">${conclusao}</span>\n                            </div>
                        </div>
                    </div>`;
            });

            if(!html){ cont.innerHTML='<div class=\"alert alert-info\">Sem dados para exibir.</div>'; return; }
            cont.innerHTML = html;
        }

        function exportarRelatorioContabCSV(){
            const resp = (byId('selResponsavelContab')?.value||'').trim();
            const comp = byId('competenciaContab')?.value||'';
            if(!comp) return;
            const filtroNorm = normalizarTexto(resp);
            const lista = (empresas||[]).filter(e=> !filtroNorm || normalizarTexto(e.responsavel||'')===filtroNorm);
            const rows = [['Empresa','CNPJ','Responsável','Competência','Classificação Contabilidade','Status']];
            let temDados=false;
            const hasFlag = (emp, flag)=> (emp?.obrigacoesMensais?.outras||[]).includes(flag);
            const filtroSel = (byId('filtroContab')?.value||'todos');
            const listaFiltrada = lista.filter(emp=>{
                if(filtroSel==='com'){ return hasFlag(emp,'Com Contabilidade'); }
                if(filtroSel==='sem'){ return hasFlag(emp,'Sem Contabilidade'); }
                if(filtroSel==='nao'){ return !hasFlag(emp,'Com Contabilidade') && !hasFlag(emp,'Sem Contabilidade'); }
                return true;
            });
            if(!listaFiltrada.length) return;
            listaFiltrada.forEach(emp=>{
                const estado = carregarEstadoChecklist(emp.id, comp);
                const flagCom = hasFlag(emp,'Com Contabilidade');
                const flagSem = hasFlag(emp,'Sem Contabilidade');
                const classificacao = flagCom ? 'Com Contabilidade' : (flagSem ? 'Sem Contabilidade' : 'Não informado');
                const keyCom = 'Outras obrigações|Com Contabilidade';
                const statusCom = estado[`status|${keyCom}`] || (estado[keyCom] ? 'Sim' : 'Pendente');
                const status = flagCom ? statusCom : '—';
                rows.push([emp.nome, emp.cnpj||'', emp.responsavel||'', comp, classificacao, status]);
                temDados=true;
            });
            if(!temDados) return;
            const csv = rows.map(r=>r.map(v=>`"${(v??'').toString().replace(/"/g,'""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
            const url = URL.createObjectURL(blob);
            const nomeResp = resp ? resp.replace(/\s+/g,'_') : 'todos_responsaveis';
            const nomeArq = `relatorio_contabilidade_${nomeResp}_${comp}.csv`;
            const a = document.createElement('a'); a.href=url; a.download=nomeArq; a.click();
            URL.revokeObjectURL(url);
        }

        function imprimirRelatorioContab(){
            const cont = byId('relatorioContabilidade'); if(!cont) return;
            if(!cont.innerHTML.trim()){ gerarRelatorioContab(); }
            if(!cont.innerHTML.trim()) return;
            const w = window.open('', 'relatorio_contab', 'width=1024,height=768');
            if(!w) return;
            const html = `<!DOCTYPE html><html lang="pt-BR"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
<title>Relatório Contabilidade</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
@media print { @page { size: A4 portrait; margin: 12mm; } .no-print { display:none !important; } }
body { color:#212529; }
.table { font-size: 12px; }
.table thead th { background: #f8f9fa; }
small.text-muted { color:#6c757d !important; }
.card { border: 1px solid #e9ecef; }
</style>
</head><body class="p-3"><div class="container-fluid">${cont.outerHTML}</div></body></html>`;
            w.document.open(); w.document.write(html); w.document.close(); w.focus();
            w.onload = ()=>{ try{ w.print(); w.close(); }catch(e){} };
            setTimeout(()=>{ try{ w.print(); w.close(); }catch(e){} }, 300);
        }
    </script>
</body>
</html>
